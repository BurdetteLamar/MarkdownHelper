require_relative '../../lib/string_helper'

namespace :build do

  def camelize(snake_case_string)
    snake_case_string.split('_').collect(&:capitalize).join
  end

  desc 'Build use case markdown'
  task :use_cases do
    # Page that links to use cases.
    File.open('use_cases.md', 'w') do |use_case_file|
      use_case_file.puts(<<EOT
# Use Cases

EOT
      )
      dir_path = File.dirname(__FILE__)
      Dir.chdir(dir_path) do
        use_case_dirs = {
            :include_files => %w/
                reuse_text
                nest_inclusions
                include_markdown
                include_code_block
                include_highlighted_code
                include_page_toc
                include_text_as_comment
                include_text_as_pre
                include_generated_text
                include_with_added_comments
                diagnose_missing_includee
                diagnose_circular_includes
            /,
        }
        use_case_dirs.each_pair do |section, dir_names|

          # Header for section, if any dirs therein.
          title = StringHelper.to_title(section.to_s).sub(/ toc$/i, ' TOC')
          use_case_file.puts(<<EOT
## #{title}

EOT
) unless dir_names.empty?

          # Be careful with use case that has a backtrace.
          backtrace_cases = %w/
              diagnose_missing_includee
              diagnose_circular_includes
          /

          # Each use case is in a separate directory.
          dir_names.each do |dir_name|
            Dir.chdir("#{section}/#{dir_name}") do
              class_name = camelize(dir_name)
              if backtrace_cases.include?(dir_name)
                # Generate the error.
                command = 'markdown_helper include --pristine includer.md included.md'
                # And capture the exception.
                command += " 2> #{dir_name}.err"
                begin
                  system(command)
                rescue
                  #
                end
              end
              command = 'markdown_helper include --pristine use_case_template.md use_case.md'
              system(command)

              title_line = File.open('use_case_template.md').grep(/^#/).first.chomp
              title = title_line.split(/\s/, 2).pop
              use_case_file_name = File.basename('use_case.md')
              use_case_anchor = dir_name.gsub('_', '-')
              use_case_relative_url = File.join(
                  section.to_s,
                  dir_name,
                  use_case_file_name + '#' + use_case_anchor,
              )
              use_case_file.puts("* [#{title}](#{use_case_relative_url})")
            end
          end
        end
      end
    end
  end

end
